import requests
import csv
import sys
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from bs4 import BeautifulSoup
from colorama import Fore, init

init(convert=True) # Needed to make colors in powershell work

requests.packages.urllib3.disable_warnings(InsecureRequestWarning) #Skip SSL verification

helptxt = """
-f : Qualys results filename/path

-s : severity level (Defualt will be all)

-o : output to text file

--help : Prints this message

examples:
python cvesearch.py -f vulns.csv -s 4,5 -o results.txt
python cvesearch.py -f vulns.csv 
"""

class search:

    def __init__(self, filename):
        self.filename = filename
        self.results = {}
        with open(self.filename, 'r') as csvfile:

            qidlst = []

            with open("QID_Blacklist.txt", 'r') as file:
                print(f"{Fore.YELLOW}[*]{Fore.WHITE} Building QID blacklist\n")
                
                for line in file.readlines():
                    qidlst.append(line.strip())
            
            csvreader = csv.reader(csvfile)

            for row in csvreader:
                if len(row) == 30 and row[0] == "IP":
                      keys = row
                if len(row) == 30 and row[0] != "IP":

                    if row[5] in qidlst:
                        continue

                    if row[6] in self.results.keys():
                        self.results[row[6]]["IP"] += f", {row[0]}"
                        continue
                    
                    else:
                        self.results[row[6]] = {}
                    
                    for i in range(30):
                        
                        if i == 13:
                            self.results[row[6]][keys[i]] = [cve for cve in row[i].strip().split(",")]
                        else:
                            self.results[row[6]][keys[i]] = row[i]

    def cyberhelp(self, key):

        results = []
        
        for cve in self.results[key]["CVE ID"]:
            
            r = requests.get(f"https://www.cybersecurity-help.cz/vdb/list.php?search_line=Y&filter[%SEARCH]={cve}&filter[EXPLOIT]=Y", verify=False)
            soup = BeautifulSoup(r.text, 'html.parser')
            lst = soup.find_all(class_ = "cvp_title")
                    
            for link in lst:
                results.append(cve.strip() + " : " + "https://www.cybersecurity-help.cz" + link.find("a")["href"])

        return results
            
    def qualys(self, key):

        results = []

        if self.results[key]["Exploitability"] != "":
            results.append(self.results[key]["Exploitability"])
            
        return results

def main():

    sevlst = ["5", "4", "3", "2", "1"]
    savefile = False

    print(r'''
____________    ____________   ________                             ______  
__  ____/__ |  / /___  ____/   __  ___/_____ ______ ___________________  /_ 
_  /     __ | / / __  __/      _____ \ _  _ \_  __ `/__  ___/_  ___/__  __ \
/ /___   __ |/ /  _  /___      ____/ / /  __// /_/ / _  /    / /__  _  / / /
\____/   _____/   /_____/      /____/  \___/ \__,_/  /_/     \___/  /_/ /_/

''')

    if len(sys.argv) <= 1 or "--help" in sys.argv:
        print(helptxt)
        quit()

    if "-o" in sys.argv:
        index = sys.argv.index("-o")
        output_filename = sys.argv[index + 1]
        savefile = True
        writeoutput = ""

    if "-s" in sys.argv:
        index = sys.argv.index("-s")
        sevlst = sys.argv[index + 1].strip().split(",")

    if "-f" in sys.argv:
        index = sys.argv.index("-f")
        filename = sys.argv[index + 1].strip()

    builder = search(filename)

    for key in builder.results:

        if builder.results[key]["Severity"] in sevlst and len(builder.results[key]["CVE ID"]) != 0:

            cyber = builder.cyberhelp(key)
            qualys = builder.qualys(key)

            len_check = cyber + qualys

            if len(len_check) != 0:

                # results info
                print(f"{Fore.CYAN}[ TITLE ] " + builder.results[key]["Title"])
                print("[ CVE ] " + ", ".join(builder.results[key]["CVE ID"]))
                print("[ IPS AFFECTED ] " + builder.results[key]["IP"])

                if builder.results[key]["Port"] != "":
                    print("[ PORTS AFFECTED ] " + builder.results[key]["Port"])
                else:
                    print("[ PORTS AFFECTED ] No ports found")
                print("[ SEVERITY ] " + builder.results[key]["Severity"] + f"{Fore.WHITE}")
                
                # Cyberhelper
                if len(cyber) == 0:
                    print(f"\n{Fore.RED}[*]{Fore.WHITE} Cyberhelper results: \nNo Results")
                else:
                    print(f"\n{Fore.GREEN}[*]{Fore.WHITE} Cyberhelper results: ")
                    for results in cyber:
                        print(results)

                # Qualys
                if len(qualys) == 0:
                    print(f"\n{Fore.RED}[*]{Fore.WHITE} Qualys results: \nNo Results")
                else:
                    print(f"\n{Fore.GREEN}[*]{Fore.WHITE} Qualys results: ")
                    for results in qualys:
                        print(results)

                print("\n") # Newline seperation

                if savefile:
                    
                    writeoutput += "[ TITLE ] " + builder.results[key]["Title"] + "\n"
                    writeoutput += "[ CVE ] " + ", ".join(builder.results[key]["CVE ID"]) + "\n"
                    writeoutput += "[ IPS AFFECTED ] " + builder.results[key]["IP"] + "\n"

                    if builder.results[key]["Port"] != "":                        
                        writeoutput += "[ PORTS AFFECTED ] " + builder.results[key]["Port"] + "\n"
                    else:                      
                        writeoutput += "[ PORTS AFFECTED ] No ports found" + "\n"

                    writeoutput += "[ SEVERITY ] " + builder.results[key]["Severity"] + "\n"

                    writeoutput += "\n".join(cyber)
                    writeoutput += "\n"
                    writeoutput += "\n".join(qualys)
                    writeoutput += "\n\n"
                    
                    

    if savefile:
        with open(output_filename, 'w') as file:
            file.write(writeoutput)
            





if __name__ == "__main__":
    main()
